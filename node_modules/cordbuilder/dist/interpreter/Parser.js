"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BuilderDefinition_1 = __importDefault(require("../statements/BuilderDefinition"));
const PropertyDefinition_1 = __importDefault(require("../statements/PropertyDefinition"));
const Lexer_1 = require("./Lexer");
class Parser {
    constructor(source) {
        this.source = source;
        this.cursor = 0;
        this.tokens = new Lexer_1.Lexer(source).lex();
    }
    build() {
        const properties = [];
        while (this.hasMoreTokens() && this.current.kind !== Lexer_1.TokenKind.EndOfFile) {
            const property = this.propertyDefinition();
            properties.push(property);
        }
        return new BuilderDefinition_1.default(properties);
    }
    propertyDefinition() {
        const keyword = this.expect(Lexer_1.TokenKind.Keyword);
        const value = this.expect(Lexer_1.TokenKind.String);
        return new PropertyDefinition_1.default(keyword, value);
    }
    expect(kind) {
        if (this.current.kind !== kind)
            throw new Error(`Expected ${Lexer_1.TokenKind[kind]}, but received: ${Lexer_1.TokenKind[this.current.kind]}`);
        return this.next();
    }
    next() {
        const previous = this.tokens[this.cursor];
        this.cursor++;
        return previous;
    }
    get current() {
        return this.tokens[this.cursor];
    }
    hasMoreTokens() {
        return this.tokens.length !== this.cursor;
    }
}
exports.default = Parser;
