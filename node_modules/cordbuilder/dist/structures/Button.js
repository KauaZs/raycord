"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
const discord_js_1 = require("discord.js");
const discord_1 = require("../constants/discord");
const Parser_1 = __importDefault(require("../interpreter/Parser"));
class Button {
    static from(source) {
        const parser = new Parser_1.default(source);
        const button = parser.build();
        return Button.validateProperties(button);
    }
    static edit(btn, source) {
        const parser = new Parser_1.default(source);
        const button = parser.build();
        const props = button.body.map(x => x.keyword.lexeme);
        if (props.includes('style'))
            btn.setStyle(Button.validateStyle(button));
        const style = btn.data.style;
        if (props.includes('label'))
            btn.setLabel(Button.validateLabel(button));
        if (props.includes('emoji'))
            btn.setEmoji(Button.validateEmoji(button));
        if (props.includes('url'))
            btn.setURL(Button.validateLink(button, style));
        if (props.includes('id'))
            btn.setCustomId(Button.validateCustomId(button));
        if (props.includes('disabled'))
            btn.setDisabled(Button.validateDisabled(button));
    }
    static validateProperties(button) {
        const btn = new discord_js_1.ButtonBuilder();
        const style = Button.validateStyle(button);
        btn.setLabel(Button.validateLabel(button));
        btn.setStyle(style);
        btn.setCustomId(Button.validateCustomId(button));
        const props = button.body.map(x => x.keyword.lexeme);
        if (props.includes('emoji'))
            btn.setEmoji(Button.validateEmoji(button));
        if (props.includes('url'))
            btn.setURL(Button.validateLink(button, style));
        if (props.includes('disabled'))
            btn.setDisabled(Button.validateDisabled(button));
        return btn;
    }
    static validateStyle(button) {
        const value = Button.validateValue(button, 'style');
        if (!discord_1.BUTTON_STYLES.includes(value.toLowerCase()))
            throw new Error(`You must define a valid style label! ${value} is not a button style!`);
        switch (value.toLowerCase()) {
            case "secondary": return discord_js_1.ButtonStyle.Secondary;
            case "success": return discord_js_1.ButtonStyle.Success;
            case "danger": return discord_js_1.ButtonStyle.Danger;
            case "link": return discord_js_1.ButtonStyle.Link;
            default: return discord_js_1.ButtonStyle.Primary;
        }
    }
    static validateLabel(button) {
        return Button.validateValue(button, 'label');
    }
    static validateLink(button, style) {
        if (style !== discord_js_1.ButtonStyle.Link)
            throw new Error(`You can only set button url in buttons when the button style is "Link"!`);
        return Button.validateValue(button, 'url');
    }
    static validateCustomId(button) {
        return Button.validateValue(button, 'id');
    }
    static validateEmoji(button) {
        return Button.validateValue(button, 'emoji');
    }
    static validateDisabled(button) {
        const value = Button.validateValue(button, 'disabled');
        if (value !== 'true' && value !== 'false') {
            throw new Error(`The disabled property can only be assigned as 'true' or 'false'`);
        }
        return Boolean(value);
    }
    static validateValue(button, prop) {
        const props = button.body.filter(p => p.keyword.lexeme == prop);
        if (props.length > 1)
            throw new Error(`Expected only one ${prop}, but received ${props.length} ${prop}s!`);
        if (props.length == 0)
            throw new Error(`You must define a button ${prop}!`);
        const value = props[0].value.lexeme;
        if (value.trim() == "")
            throw new Error(`You must define a valid button ${prop}, this cannot be empty!`);
        return value;
    }
}
exports.Button = Button;
